{"version":3,"sources":["components/Title.tsx","components/const.ts","components/GameOfLife.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","appbar","marginBottom","title","flex","display","marginLeft","button","margin","Title","running","handleSimulation","generatePopulation","classes","AppBar","position","className","Toolbar","Grid","container","justify","item","Typography","variant","Button","color","onClick","OPERATION","GameOfLife","useState","rows","i","push","Array","from","grid","setGrid","mouseDown","setMouseDown","previousCell","setPreviousCell","setRunning","runningRef","useRef","toggleCell","j","newGrid","produce","prevGrid","current","runSimulation","useCallback","gridCopy","console","log","neighboursAlive","forEach","deltaI","deltaJ","newI","newJ","setTimeout","prev","chance","Math","random","GENERATE_POPULATION","style","justifyContent","map","row","indexI","key","height","CELL_SIZE","cell","indexJ","border","width","backgroundColor","onMouseDown","onMouseEnter","onMouseUp","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.edfc8ee9.chunk.js","sourcesContent":["import React from 'react'\nimport { AppBar, Toolbar, Typography, makeStyles, Grid, Button } from '@material-ui/core'\n\ninterface Props {\n    running: boolean\n    handleSimulation: () => void\n    generatePopulation: () => void\n}\n\nconst useStyles = makeStyles(() => ({\n    appbar: {\n        marginBottom: \"30px\"\n    },\n    title: {\n        flex: 1,\n        display: \"inline\",\n        marginLeft: \"10px\"\n    },\n    button: {\n        margin: \"auto 10px auto auto\"\n    }\n}))\n\nexport default function Title({ running, handleSimulation, generatePopulation }: Props): JSX.Element {\n    const classes = useStyles()\n    return (\n        <AppBar position=\"static\" className={classes.appbar}>\n            <Toolbar>\n                <Grid container justify=\"space-between\">\n                    <Grid item>\n                        <Typography variant=\"h6\" className={classes.title}>\n                            GAME OF LIFE\n                        </Typography>\n                    </Grid>\n\n                    <Grid item>\n                        <Button\n                            variant=\"outlined\"\n                            className={classes.button}\n                            color=\"inherit\"\n                            onClick={generatePopulation}\n                        >\n                            GENERATE CELLS\n                        </Button>\n                        <Button\n                            color={running ? \"secondary\" : \"inherit\"}\n                            onClick={handleSimulation}\n                            variant=\"outlined\"\n                            className={classes.button}\n                        >\n                            {running ? \"STOP\" : \"START\"}\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Toolbar>\n        </AppBar>\n    )\n}\n","const GRID_ROW: number = 25;\nconst GRID_COLUMN: number = 50;\nconst CELL_SIZE: number = 25\nconst BORDER_SIZE = 1\n\nconst OPERATION: number[][] = [\n    [0, 1],\n    [0, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [1, 0],\n    [-1, 0]\n];\n\nconst DELAY: number = 100\n\nconst GENERATE_POPULATION = (grid: number[][]): number[][] => {\n    for (let i = 0; i < GRID_ROW; i++) {\n        for (let j = 0; j < GRID_COLUMN; j++) {\n            const chance: number = Math.random()\n            if (chance > 0.5) grid[i][j] = 1\n            else grid[i][j] = 0\n        }\n    }\n    return grid\n}\n\nexport { GRID_ROW, GRID_COLUMN, CELL_SIZE, BORDER_SIZE, OPERATION, DELAY, GENERATE_POPULATION };","import React, { useState, useCallback, useRef } from \"react\";\nimport Title from \"./Title\";\nimport produce from \"immer\";\n\nimport {\n  GRID_COLUMN,\n  GRID_ROW,\n  CELL_SIZE,\n  BORDER_SIZE,\n  OPERATION,\n  DELAY,\n  GENERATE_POPULATION,\n} from \"./const\";\n\nexport default function GameOfLife(): JSX.Element {\n  const [grid, setGrid]: [\n    number[][],\n    React.Dispatch<React.SetStateAction<number[][]>>,\n  ] = useState<number[][]>(() => {\n    const rows = [];\n    for (let i = 0; i < GRID_ROW; i++) {\n      rows.push(Array.from(Array(GRID_COLUMN), () => 0));\n    }\n    return rows;\n  });\n  const [mouseDown, setMouseDown]: [\n    boolean,\n    React.Dispatch<React.SetStateAction<boolean>>,\n  ] = useState<boolean>(false);\n  const [previousCell, setPreviousCell]: [\n    number[],\n    React.Dispatch<React.SetStateAction<number[]>>,\n  ] = useState<number[]>([-1, -1]);\n  const [running, setRunning]: [\n    boolean,\n    React.Dispatch<React.SetStateAction<boolean>>,\n  ] = useState<boolean>(false);\n  const runningRef = useRef<boolean>(running);\n  runningRef.current = running;\n\n  function toggleCell(i: number, j: number): void {\n    const newGrid = produce(grid, (prevGrid) => {\n      prevGrid[i][j] = prevGrid[i][j] === 1 ? 0 : 1;\n    });\n    setGrid(newGrid);\n  }\n\n  function handleMouseDown(i: number, j: number): void {\n    setMouseDown(true);\n    setPreviousCell([i, j]);\n    toggleCell(i, j);\n  }\n\n  function handleMouseEnter(i: number, j: number): void {\n    if (!mouseDown) return;\n    setPreviousCell([i, j]);\n    toggleCell(i, j);\n  }\n\n  function handleMouseUp(i: number, j: number): void {\n    if (i === previousCell[0] && j === previousCell[1]) setMouseDown(false);\n    else {\n      toggleCell(i, j);\n      setMouseDown(false);\n    }\n  }\n\n  const runSimulation: () => void = useCallback(() => {\n    if (!runningRef.current) return;\n\n    setGrid((prevGrid) => {\n      return produce(prevGrid, (gridCopy) => {\n        console.log(gridCopy);\n        for (let i = 0; i < GRID_ROW; i++) {\n          for (let j = 0; j < GRID_COLUMN; j++) {\n            let neighboursAlive: number = 0;\n\n            OPERATION.forEach(([deltaI, deltaJ]) => {\n              const newI = i + deltaI;\n              const newJ = j + deltaJ;\n              if (\n                newI >= 0 && newI < GRID_ROW && newJ >= 0 &&\n                newJ < GRID_COLUMN\n              ) {\n                neighboursAlive += prevGrid[newI][newJ];\n              }\n            });\n\n            if (neighboursAlive < 2 || neighboursAlive > 3) {\n              gridCopy[i][j] = 0;\n            } else if (prevGrid[i][j] === 0 && neighboursAlive === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n        return gridCopy;\n      });\n    });\n\n    setTimeout(runSimulation, DELAY);\n  }, []);\n\n  function handleSimulation(): void {\n    setRunning(!running);\n    if (!running) {\n      runningRef.current = true;\n      runSimulation();\n    }\n  }\n\n  function generatePopulation(): void {\n    setGrid((prev) => {\n      return produce(prev, (gridCopy) => {\n        return GENERATE_POPULATION(gridCopy);\n      });\n    });\n  }\n\n  return (\n    <>\n      <Title\n        running={running}\n        handleSimulation={handleSimulation}\n        generatePopulation={generatePopulation}\n      />\n      <div style={{ display: \"grid\", justifyContent: \"center\" }}>\n        <div>\n          {grid.map((row, indexI) =>\n            <div\n              key={`row-${indexI}`}\n              style={{\n                height: CELL_SIZE + (2 * BORDER_SIZE),\n              }}\n            >\n              {row.map((cell, indexJ) =>\n                <div\n                  key={`cell-${indexI}-${indexJ}`}\n                  style={{\n                    display: \"inline-block\",\n                    border: `${BORDER_SIZE}px solid lightblue`,\n                    width: CELL_SIZE,\n                    height: CELL_SIZE,\n                    backgroundColor: cell ? \"#120136\" : \"white\",\n                  }}\n                  onMouseDown={() => handleMouseDown(indexI, indexJ)}\n                  onMouseEnter={() => handleMouseEnter(indexI, indexJ)}\n                  onMouseUp={() => handleMouseUp(indexI, indexJ)}\n                >\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react'\nimport \"./App.css\"\n\nimport GameOfLife from './components/GameOfLife'\n\nexport default function App(): JSX.Element {\n    return (\n        <div className=\"App\">\n            <GameOfLife />\n        </div>\n    )\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}